<?php

/**
 * Object-Cache GoDaddy Managed WordPress Platform - Redis Implementation of the API.
 *
 * @link https://github.secureserver.net/WPPaaS/wpaas-php-object-cache
 *
 * Based on the WP Redis plugin: @link https://wordpress.org/plugins/wp-redis
 *
 * @package     wpaas-php-object-cache
 * @author      Daniel Dubovik, James Dugger
 * @copyright   2016 GoDaddy Inc. 14455 N. Hayden Road Scottsdale, Arizona
 *
 * Version: 1.0.0
 *
 */

# Users with setups where multiple installs share a common wp-config.php or $table_prefix
# can use this to guarantee uniqueness for the keys generated by this object cache
if ( ! defined( 'WP_CACHE_KEY_SALT' ) ) {

	define( 'WP_CACHE_KEY_SALT', '' );

}

/**
 * Adds data to the cache, if the cache key doesn't already exist.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::add()
 *
 * @param int|string $key The cache key to use for retrieval later
 * @param mixed $data The data to add to the cache store
 * @param string $group The group to add the cache to
 * @param int $expire When the cache data should be expired
 * @return bool False if cache key and group already exist, true on success
 */
function wp_cache_add( $key, $data, $group = '', $expire = 0 ) {

	global $wp_object_cache;

	return $wp_object_cache->add( $key, $data, $group, (int) $expire );

}

/**
 * Closes the cache.
 *
 * This function has ceased to do anything since WordPress 2.5. The
 * functionality was removed along with the rest of the persistent cache. This
 * does not mean that plugins can't implement this function when they need to
 * make sure that the cache is cleaned up after WordPress no longer needs it.
 *
 * @return bool Always returns True
 */
function wp_cache_close() {

	return true;

}

/**
 * Decrement numeric cache item's value
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::decr()
 *
 * @param int|string $key The cache key to increment
 * @param int $offset The amount by which to decrement the item's value. Default is 1.
 * @param string $group The group the key is in.
 * @return false|int False on failure, the item's new value on success.
 */
function wp_cache_decr( $key, $offset = 1, $group = '' ) {

	global $wp_object_cache;

	return $wp_object_cache->decr( $key, $offset, $group );

}

/**
 * Removes the cache contents matching key and group.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::delete()
 *
 * @param int|string $key What the contents in the cache are called
 * @param string $group Where the cache contents are grouped
 * @return bool True on successful removal, false on failure
 */
function wp_cache_delete( $key, $group = '' ) {

	global $wp_object_cache;

	return $wp_object_cache->delete( $key, $group );

}

/**
 * Removes cache contents for a given group.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::delete_group()
 *
 * @param string $group Where the cache contents are grouped
 * @return bool True on successful removal, false on failure
 */
function wp_cache_delete_group( $group ) {

	global $wp_object_cache;

	return $wp_object_cache->delete_group( $group );

}

/**
 * Removes all cache items.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::flush()
 *
 * @return bool False on failure, true on success
 */
function wp_cache_flush() {

	global $wp_object_cache;

	return $wp_object_cache->flush();

}

/**
 * Retrieves the cache contents from the cache by key and group.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::get()
 *
 * @param int|string $key What the contents in the cache are called
 * @param string $group Where the cache contents are grouped
 * @param bool $force Whether to force an update of the local cache from the persistent cache (default is false)
 * @param &bool $found Whether key was found in the cache. Disambiguates a return of false, a storable value.
 * @return bool|mixed False on failure to retrieve contents or the cache
 *      contents on success
 */
function wp_cache_get( $key, $group = '', $force = false, &$found = null ) {

	global $wp_object_cache;

	return $wp_object_cache->get( $key, $group, $force, $found );

}

/**
 * Increment numeric cache item's value
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::incr()
 *
 * @param int|string $key The cache key to increment
 * @param int $offset The amount by which to increment the item's value. Default is 1.
 * @param string $group The group the key is in.
 * @return false|int False on failure, the item's new value on success.
 */
function wp_cache_incr( $key, $offset = 1, $group = '' ) {

	global $wp_object_cache;

	return $wp_object_cache->incr( $key, $offset, $group );

}

/**
 * Sets up Object Cache Global and assigns it.
 *
 * @global WP_Object_Cache $wp_object_cache WordPress Object Cache
 */
function wp_cache_init() {

    $GLOBALS['wp_object_cache'] = new WP_Object_Cache();

}

/**
 * Replaces the contents of the cache with new data.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::replace()
 *
 * @param int|string $key What to call the contents in the cache
 * @param mixed $data The contents to store in the cache
 * @param string $group Where to group the cache contents
 * @param int $expire When to expire the cache contents
 * @return bool False if not exists, true if contents were replaced
 */
function wp_cache_replace( $key, $data, $group = '', $expire = 0 ) {

	global $wp_object_cache;

	return $wp_object_cache->replace( $key, $data, $group, (int) $expire );

}

/**
 * Saves the data to the cache.
 *
 * @uses $wp_object_cache Object Cache Class
 * @see WP_Object_Cache::set()
 *
 * @param int|string $key What to call the contents in the cache
 * @param mixed $data The contents to store in the cache
 * @param string $group Where to group the cache contents
 * @param int $expire When to expire the cache contents
 * @return bool False on failure, true on success
 */
function wp_cache_set( $key, $data, $group = '', $expire = 0 ) {

	global $wp_object_cache;

	return $wp_object_cache->set( $key, $data, $group, (int) $expire );

}

/**
 * Switch the interal blog id.
 *
 * This changes the blog id used to create keys in blog specific groups.
 *
 * @param int $blog_id Blog ID
 */
function wp_cache_switch_to_blog( $blog_id ) {

	global $wp_object_cache;

	return $wp_object_cache->switch_to_blog( $blog_id );

}

/**
 * Adds a group or set of groups to the list of global groups.
 *
 * @param string|array $groups A group or an array of groups to add
 */
function wp_cache_add_global_groups( $groups ) {

	global $wp_object_cache;

	return $wp_object_cache->add_global_groups( $groups );

}

/**
 * Adds a group or set of groups to the list of non-persistent groups.
 *
 * @param string|array $groups A group or an array of groups to add
 */
function wp_cache_add_non_persistent_groups( $groups ) {

	global $wp_object_cache;

	$wp_object_cache->add_non_persistent_groups( $groups );

}

/**
 * Reset internal cache keys and structures. If the cache backend uses global
 * blog or site IDs as part of its cache keys, this function instructs the
 * backend to reset those keys and perform any cleanup since blog or site IDs
 * have changed since cache init.
 *
 * This function is deprecated. Use wp_cache_switch_to_blog() instead of this
 * function when preparing the cache for a blog switch. For clearing the cache
 * during unit tests, consider using wp_cache_init(). wp_cache_init() is not
 * recommended outside of unit tests as the performance penality for using it is
 * high.
 *
 * @deprecated 3.5.0
 */
function wp_cache_reset() {

	_deprecated_function( __FUNCTION__, '3.5' );

	global $wp_object_cache;

	return $wp_object_cache->reset();

}

/**
 * WordPress Object Cache
 *
 * The WordPress Object Cache is used to save on trips to the database. The
 * Object Cache stores all of the cache data to memory and makes the cache
 * contents available by using a key, which is used to name and later retrieve
 * the cache contents.
 *
 * The Object Cache can be replaced by other caching mechanisms by placing files
 * in the wp-content folder which is looked at in wp-settings. If that file
 * exists, then this file will not be included.
 */
class WP_Object_Cache {

	/**
	 *
	 * Holds the cached objects
	 *
	 * @var array $cache
     * @access public
	 */
	public $cache = [];

	/**
	 * The amount of times the cache data was already stored in the cache.
	 *
	 *
	 * @var int $cache_hits
     * @access public
     */
	public $cache_hits = 0;

	/**
	 * Amount of times the cache did not have the request in cache
	 *
	 * @var int $cache_misses
	 * @access public
	 */
	public $cache_misses = 0;

	/**
	 * The amount of times a request was made to Redis
	 *
	 * @access public
	 * @var int $redis_calls
	 */
	public $redis_calls = [];

	/**
	 * List of global groups
	 *
	 * @var array $global_groups
	 * @access public
	 */
	public $global_groups = [];

	/**
	 * List of non-persistent groups
	 *
	 * @var array $non_persistent_groups
	 * @access public
	 */
	public $non_persistent_groups = [];

	/**
	 * The blog prefix to prepend to keys in non-global groups.
	 *
	 * @var int $blog_prefix
	 * @access public
	 */
	public $blog_prefix;

	/**
	 * Whether or not Redis is connected
	 *
	 * @var bool $is_connected
	 * @access public
	 */
	public $is_connected = false;

	/**
	 * The last triggered error
     *
     * @var string $last_triggered_error
     * @access public
	 */
	public $last_triggered_error = '';

	/**
	 * Max TTL for a cache item, in seconds
	 * @var int $max_cache_ttl
	 * @access public
	 */
	public $max_cache_ttl = 604800;

	/**
	 * Minimum TTL for a cache item, in seconds
	 * @var int $default_expire
	 * @access public
	 */
	public $default_expire = 86400;

	/**
	 * Minimum response message size
	 * @var int $min_read_size
	 * @access public
	 */
	public $min_read_size = 9;

	/**
	 * Max time to wait to get a response from redis
	 * @var int $max_read_time
	 * @access public
	 */
	public $max_read_time = 5;


	/**
	 * Adds data to the cache if it doesn't already exist.
	 *
	 * @uses WP_Object_Cache::_exists Checks to see if the cache already has data.
	 * @uses WP_Object_Cache::set Sets the data after the checking the cache
	 *      contents existence.
	 *
	 * @param int|string $key What to call the contents in the cache
	 * @param mixed $data The contents to store in the cache
	 * @param string $group Where to group the cache contents
	 * @param int $expire When to expire the cache contents
	 * @return bool False if cache key and group already exist, true on success
	 */
	public function add( $key, $data, $group = 'default', $expire = 0 ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		if ( function_exists( 'wp_suspend_cache_addition' ) && wp_suspend_cache_addition() ) {

			return false;

		}

		if ( $this->_exists( $key, $group ) ) {

			return false;

		}

		return $this->set( $key, $data, $group, (int) $expire );

	}

	/**
	 * Sets the list of global groups.
	 *
	 * @param array $groups List of groups that are global.
	 */
	public function add_global_groups( $groups ) {

		$groups = (array) $groups;

		$groups = array_fill_keys( $groups, true );

		$this->global_groups = array_merge( $this->global_groups, $groups );

	}

	/**
	 * Sets the list of non-persistent groups.
	 *
	 * @param array $groups List of groups that are non-persistent.
	 */
	public function add_non_persistent_groups( $groups ) {

		$groups = (array) $groups;

		$groups = array_fill_keys( $groups, true );

		$this->non_persistent_groups = array_merge( $this->non_persistent_groups, $groups );

	}

	/**
	 * Decrement numeric cache item's value
	 *
	 * @param int|string $key The cache key to increment
	 * @param int $offset The amount by which to decrement the item's value. Default is 1.
	 * @param string $group The group the key is in.
	 * @return false|int False on failure, the item's new value on success.
	 */
	public function decr( $key, $offset = 1, $group = 'default' ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		// The key needs to exist in order to be decremented
		if ( ! $this->_exists( $key, $group ) ) {

			return false;

		}

		$offset = (int) $offset;

		# If this isn't a persistant group, we have to sort this out ourselves, grumble grumble
		if ( ! $this->_should_persist( $group ) ) {

			$existing = $this->_get_internal( $key, $group );

			if ( empty( $existing ) || ! is_numeric( $existing ) ) {

				$existing = 0;

			} else {

				$existing -= $offset;

			}

			if ( $existing < 0 ) {

				$existing = 0;

			}

			$this->_set_internal( $key, $group, $existing );

			return $existing;
		}

		$id     = $this->_key( $key, $group );

		$result = $this->_call_redis( $this->_create_container( 'incrby', $id, -$offset ) );

		if ( $result < 0 ) {

			$result = 0;

			$this->_call_redis( $this->_create_container( 'set', $id, $result ) );

		}

		if ( is_int( $result ) ) {

			$this->_set_internal( $key, $group, $result );

		}

		return $result;
	}

	/**
	 * Remove the contents of the cache key in the group
	 *
	 * If the cache key does not exist in the group and $force parameter is set
	 * to false, then nothing will happen. The $force parameter is set to false
	 * by default.
	 *
	 * @param int|string $key What the contents in the cache are called
	 * @param string $group Where the cache contents are grouped
	 * @param bool $force Optional. Whether to force the unsetting of the cache
	 *      key in the group
	 * @return bool False if the contents weren't deleted and true on success
	 */
	public function delete( $key, $group = 'default', $force = false ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		if ( ! $force && ! $this->_exists( $key, $group ) ) {

			return false;

		}

		if ( $this->_should_persist( $group ) ) {

			$id = $this->_key( $key, $group );

			$this->_call_redis( $this->_create_container( 'del', $id ) );

		}

		$this->_unset_internal( $key, $group );

		return true;

	}

	/**
	 * Remove the contents of all cache keys in the group.
	 *
	 * We don't really support this currently, but may in the future.
	 * Keeping the method here for future enhancement opportunity, and
	 * to properly support the WordPress cache API
	 *
	 * @return boolean True on success, false on failure.
	 */
	public function delete_group() {

		return false;

	}

	/**
	 * Clears the object cache of all data.
	 *
	 * By default, this will flush the session cache as well as Redis, but we
	 * can leave the redis cache intact if we want. This is helpful when, for
	 * instance, you're running a batch process and want to clear the session
	 * store to reduce the memory footprint, but you don't want to have to
	 * re-fetch all the values from the database.
	 *
	 * @param  bool $redis Should we flush redis as well as the session cache?
	 * @return bool Always returns true
	 */
	public function flush( $redis = true ) {

		$this->cache = [];

		if ( $redis ) {

			$this->_call_redis( $this->_create_container( 'flush' ) );

		}

		return true;

	}

	/**
	 * Retrieves the cache contents, if it exists
	 *
	 * The contents will be first attempted to be retrieved by searching by the
	 * key in the cache group. If the cache is hit (success) then the contents
	 * are returned.
	 *
	 * On failure, the number of cache misses will be incremented.
	 *
	 * @param int|string $key What the contents in the cache are called
	 * @param string $group Where the cache contents are grouped
	 * @param bool $force Whether to force a refetch rather than relying on the local cache (default is false)
	 * @param bool $found Optional. Whether the key was found in the cache. Disambiguates a return of false, a storable value. Passed by reference. Default null.
	 * @return bool|mixed False on failure to retrieve contents or the cache
	 *      contents on success
	 */
	public function get( $key, $group = 'default', $force = false, &$found = null ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		// Key is set internally, so we can use this value
		if ( $this->_isset_internal( $key, $group ) && ! $force ) {

			$this->cache_hits += 1;

			$found = true;

			$value = $this->_get_internal( $key, $group );

            // Check notoptions is valid. Delete and return false if not
            if ( 'notoptions' === $key && ! $this->validate_notoptions( $value ) ) {

                $this->delete( $key, $group );

                return false;
            }

            return $value;
		}

		// Not a persistent group, so don't try Redis if the value doesn't exist internally
		if ( ! $this->_should_persist( $group ) ) {

			$this->cache_misses += 1;

			$found = false;

			return false;

		}

		$id    = $this->_key( $key, $group );

		$value = $this->_call_redis( $this->_create_container( 'get', $id ) );

		// If the key does not exist, $value will be the boolean false.  Otherwise
		// it will contain our data.
		if ( false === $value ) {

			$this->cache_misses += 1;

			$found = false;

			return false;

		}

		// All non-numeric values are serialized
        if ( ! is_numeric( $value ) ) {
             $value = unserialize( base64_decode ( $value  ) );
        }

        // Check notoptions is valid. Delete and return false if not
        if ( 'notoptions' === $key && ! $this->validate_notoptions( $value ) ) {

            $this->delete($key, $group);

            return false;
        }


        $this->_set_internal( $key, $group, $value );

		$this->cache_hits += 1;

		$found = true;

		return $value;

	}

	/**
	 * Increment numeric cache item's value
	 *
	 * @param int|string $key The cache key to increment
	 * @param int $offset The amount by which to increment the item's value. Default is 1.
	 * @param string $group The group the key is in.
	 * @return false|int False on failure, the item's new value on success.
	 */
	public function incr( $key, $offset = 1, $group = 'default' ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		// The key needs to exist in order to be incremented
		if ( ! $this->_exists( $key, $group ) ) {

			return false;

		}

		$offset = (int) $offset;

		# If this isn't a persistant group, we have to sort this out ourselves, grumble grumble
		if ( ! $this->_should_persist( $group ) ) {

			$existing = $this->_get_internal( $key, $group );

			if ( empty( $existing ) || ! is_numeric( $existing ) ) {

				$existing = 1;

			} else {

				$existing += $offset;

			}

			if ( $existing < 0 ) {

				$existing = 0;

			}

			$this->_set_internal( $key, $group, $existing );

			return $existing;

		}

		$id     = $this->_key( $key, $group );

		$result = $this->_call_redis( $this->_create_container( 'incrby', $id, $offset ) );

		if ( $result < 0 ) {

			$result = 0;

			$this->_call_redis( $this->_create_container( 'set', $id, $result ) );

		}

		if ( is_int( $result ) ) {

			$this->_set_internal( $key, $group, $result );

		}

		return $result;

	}

	/**
	 * Replace the contents in the cache, if contents already exist
	 * @see WP_Object_Cache::set()
	 *
	 * @param int|string $key What to call the contents in the cache
	 * @param mixed $data The contents to store in the cache
	 * @param string $group Where to group the cache contents
	 * @param int $expire When to expire the cache contents
	 * @return bool False if not exists, true if contents were replaced
	 */
	public function replace( $key, $data, $group = 'default', $expire = 0 ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		if ( ! $this->_exists( $key, $group ) ) {

			return false;

		}

		return $this->set( $key, $data, $group, (int) $expire );

	}

	/**
	 * Reset keys
	 *
	 * @deprecated 3.5.0
	 */
	public function reset() {

		_deprecated_function( __FUNCTION__, '3.5', 'switch_to_blog()' );

	}

	/**
	 * Sets the data contents into the cache
	 *
	 * The cache contents is grouped by the $group parameter followed by the
	 * $key. This allows for duplicate ids in unique groups. Therefore, naming of
	 * the group should be used with care and should follow normal function
	 * naming guidelines outside of core WordPress usage.
	 *
	 * The $expire parameter is not used, because the cache will automatically
	 * expire for each time a page is accessed and PHP finishes. The method is
	 * more for cache plugins which use files.
	 *
	 * @param int|string $key What to call the contents in the cache
	 * @param mixed $data The contents to store in the cache
	 * @param string $group Where to group the cache contents
	 * @param int $expire TTL for the data, in seconds
	 * @return bool Always returns true
	 */
	public function set( $key, $data, $group = 'default', $expire = 0 ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		if ( is_object( $data ) ) {

			$data = clone $data;

		}

		// Do not allow an invalid notoptions to be set
        if ( 'notoptions' === $key && ! $this->validate_notoptions( $data ) ) {

            return true;
        }

		$this->_set_internal( $key, $group, $data );

		if ( ! $this->_should_persist( $group ) ) {

			return true;

		}

		# If this is an integer, store it as such. Otherwise, serialize it.
		if ( ! is_numeric( $data ) || intval( $data ) !== $data ) {

			$data =  base64_encode( serialize( $data ));

		}

		$id = $this->_key( $key, $group );

		$this->_call_redis( $this->_create_container( 'set', $id, $data, $expire ) );

		return true;

	}

	/**
	 * Echoes the stats of the caching.
	 *
	 * Gives the cache hits, and cache misses. Also prints every cached group,
	 * key and the data.
	 */
	public function stats() {

		$total_redis_calls = 0;

		foreach ( $this->redis_calls as $method => $calls ) {

			$total_redis_calls += $calls;

		}

		$out   = [];
		$out[] = '<p>';
		$out[] = '<strong>Cache Hits:</strong>' . (int) $this->cache_hits . '<br />';
		$out[] = '<strong>Cache Misses:</strong>' . (int) $this->cache_misses . '<br />';
		$out[] = '<strong>Redis Calls:</strong>' . (int) $total_redis_calls . ':<br />';

		foreach ( $this->redis_calls as $method => $calls ) {

			$out[] = ' - ' . esc_html( $method ) . ': ' . (int) $calls . '<br />';

		}

		$out[] = '</p>';
		$out[] = '<ul>';

		foreach ( $this->cache as $group => $cache ) {

			$out[] = '<li><strong>Group:</strong> ' . esc_html( $group ) . ' - ( ' . number_format( mb_strlen( base64_encode( serialize( $cache ) ) )/ 1024, 2 ) . 'k )</li>';

		}

		$out[] = '</ul>';

		// @codingStandardsIgnoreStart
		echo implode( PHP_EOL, $out );
		// @codingStandardsIgnoreEnd

	}

	/**
	 * Switch the interal blog id.
	 *
	 * This changes the blog id used to create keys in blog specific groups.
	 *
	 * @param int $blog_id Blog ID
	 */
	public function switch_to_blog( $blog_id ) {

		$blog_id = (int) $blog_id;

		$this->blog_prefix = $this->multisite ? $blog_id . ':' : '';

	}

	/**
	 * Utility function to determine whether a key exists in the cache.
	 *
	 * @access protected
	 *
	 * @param $key
	 * @param $group
	 *
	 * @return bool
	 */
	protected function _exists( $key, $group ) {

		if ( $this->_isset_internal( $key, $group ) ) {

			return true;

		}

		if ( ! $this->_should_persist( $group ) ) {

			return false;

		}

		$id  = $this->_key( $key, $group );

		return $this->_call_redis( $this->_create_container( 'exists', $id ) );

	}

	/**
	 * Check whether there's a value in the internal object cache.
	 *
	 * @param string $key
	 * @param string $group
	 * @return boolean
	 */
	protected function _isset_internal( $key, $group ) {

		$key = $this->_key( $key, $group );

		return isset( $this->cache[ $key ] );

	}

	/**
	 * Get a value from the internal object cache
	 *
	 * @param string $key
	 * @param string $group
	 * @return mixed
	 */
	protected function _get_internal( $key, $group ) {

		$value = null;

		$key = $this->_key( $key, $group );

		if ( isset( $this->cache[ $key ] ) ) {

			$value = $this->cache[ $key ];

		}

		if ( is_object( $value ) ) {

			return clone $value;

		}

		return $value;

	}

	/**
	 * Set a value to the internal object cache
	 *
	 * @param string $key
	 * @param string $group
	 * @param mixed $value
	 */
	protected function _set_internal( $key, $group, $value ) {

		// Redis converts null to an empty string
		if ( is_null( $value ) ) {

			$value = '';

		}

		$key = $this->_key( $key, $group );

		$this->cache[ $key ] = $value;

	}

	/**
	 * Unset a value from the internal object cache
	 *
	 * @param string $key
	 * @param string $group
	 */
	protected function _unset_internal( $key, $group ) {

		$key = $this->_key( $key, $group );

		if ( isset( $this->cache[ $key ] ) ) {

			unset( $this->cache[ $key ] );
		}

	}

	/**
	 * Utility function to generate the redis key for a given key and group.
	 *
	 * @param  string $key   The cache key.
	 * @param  string $group The cache group.
	 * @return string        A properly prefixed redis cache key.
	 */
	protected function _key( $key = '', $group = 'default' ) {

		if ( empty( $group ) ) {

			$group = 'default';

		}

		if ( ! empty( $this->global_groups[ $group ] ) ) {

			$prefix = $this->global_prefix;

		} else {

			$prefix = $this->blog_prefix;

		}

		return preg_replace( '/\s+/', '', WP_CACHE_KEY_SALT . "$prefix$group:$key" );

	}

	/**
	 * Does this group use persistent storage?
	 *
	 * @param  string $group Cache group.
	 * @return bool        true if the group is persistent, false if not.
	 */
	protected function _should_persist( $group ) {

		return empty( $this->non_persistent_groups[ $group ] );

	}

	/**
	 * Wrapper method for connecting to Redis, which lets us retry the connection
	 */
	protected function _connect_redis() {

		global $redis_socket_file;

		if ( empty( $redis_socket_file ) ) {

			if ( defined( 'REDIS_SOCKET' ) ) {

				$redis_socket_file = REDIS_SOCKET;

			} else {

				$this->missing_redis_message = 'Warning! No socket configured.  This object cache will not work without a defined REDIS_SOCKET';

				return false;

			}

		}

		$this->redis_proxy = @stream_socket_client( 'unix://' . $redis_socket_file, $errno, $errstr, 5 );

		@stream_set_blocking( $this->redis_proxy, false );
		@stream_set_timeout( $this->redis_proxy, 5);

		if ( ! $this->redis_proxy ) {

			$this->missing_redis_message = "Error [{$errno}] connecting to the Redis Proxy:\n{$errstr}";

			$this->is_redis_connected = false;

		} else {

			$this->is_redis_connected = true;

		}

		return $this->is_redis_connected;

	}

	/**
	 * Helper method, to write out to our socket, and make sure all the data
	 * is written out.
	 * @param string $string The string that we want to send to our socket
	 * @return int           The number of bytes successfully written to the socket
	 */
	function fwrite_stream( $string ) {

		$to_write = mb_strlen( $string );

		$info = stream_get_meta_data($this->redis_proxy);

		for ( $written = 0; $written < $to_write ; $written += $fwrite ) {

			// PHP throws a Notice if we are not able to write the entire $string in
			// one attempt.  Suppress notices here, and we can detect issues if any
			// occur up stream.
			$fwrite = @fwrite( $this->redis_proxy, substr( $string, $written ) );
			$fflush = fflush( $this->redis_proxy );

			if ( false === $fwrite ) {

				return $written;
			
			}

			if ( false === $fflush ) {
			
				return $written;

			}

			if ( $info['timed_out'] ) {

				return $written;

			}

		}

		return $written;

	}
	/**
	 * Wrapper method for calls to Redis, which fails gracefully when Redis is unavailable
	 *
	 * @param string $container Encoded message to send to Redis
	 * @return mixed $retval    Response received from Redis
	 * @throws Exception
	 */
	protected function _call_redis( $container ) {

		$retval = false;

		if ( $this->is_redis_connected && ! empty( $container ) ) {

			try {
				// we should write all the data in $json to the socket.  This will
				// check that we do, prior to attempting to get a response.
				if ( mb_strlen( $container ) == $this->fwrite_stream( $container ) ) {

					//contents of $response should be:
					// $response['response'] = true|false
					// $response['data'] = 'returned data'
					$retval = $this->_deconst_container( $this->get_response() );
				}

				return $retval;

			} catch ( Exception $e ) {

				// PhpRedis throws an Exception when it fails a server call.
				// To prevent WordPress from fataling, we catch the Exception.
				// TODO: We may need to tweak these messages that we filter on.
				$retry_exception_messages = [ 'socket error on read socket', 'Connection closed', 'Redis server went away' ];
				$retry_exception_messages = apply_filters( 'wp_redis_retry_exception_messages', $retry_exception_messages );

				if ( in_array( $e->getMessage(), $retry_exception_messages, true ) ) {

					try {

						$this->last_triggered_error = 'WP Redis: ' . $e->getMessage();

						// Be friendly to developers debugging production servers by triggering an error
						// @codingStandardsIgnoreStart
						trigger_error( $this->last_triggered_error, E_USER_WARNING );
						// @codingStandardsIgnoreEnd

					} catch ( PHPUnit_Framework_Error_Warning $e ) {

						// PHPUnit throws an Exception when `trigger_error()` is called.
						// To ensure our tests (which expect Exceptions to be caught) continue to run,
						// we catch the PHPUnit exception and inspect the RedisException message

					}

					// Attempt to refresh the connection if it was successfully established once
					// $this->is_redis_connected will be set inside _connect_redis()
					if ( $this->_connect_redis() ) {

						return call_user_func_array( [ $this, '_call_redis' ], $container );

					}

					// Fall through to fallback below
				} else {

					throw $e;

				}

			}

		}

		// Mock expected behavior from Redis for these methods
		/*
		switch ( $method ) {
			case 'incr':
			case 'incrBy':
				$val = $this->cache[ $arguments[0] ];
				$offset = isset( $arguments[1] ) && 'incrBy' === $method ? $arguments[1] : 1;
				$val = $val + $offset;
				return $val;
			case 'hIncrBy':
				$val = $this->_get_internal( $arguments[1], $group );
				return $val + $arguments[2];
			case 'decrBy':
			case 'decr':
				$val = $this->cache[ $arguments[0] ];
				$offset = isset( $arguments[1] ) && 'decrBy' === $method ? $arguments[1] : 1;
				$val = $val - $offset;
				return $val;
			case 'del':
			case 'hDel':
				return 1;
			case 'flushAll':
			case 'IsConnected':
			case 'exists':
			case 'get':
			case 'hGet':
				return false;
		}
        */

	}


	/**
	 * Helper function. Strips the size value from the stream, then returns the actual json response
	 */
	protected function get_response() {
		$resp     = '';
		$get_size = true;
		$str      = '';
		$start    = time();

		if ( $this->redis_proxy ) {

			// The minimum size to get is 29, which corresponds to a true response. Start there, then read
			// more if need be
			$bytes_to_read = $this->min_read_size;

			do {

				$data = fread( $this->redis_proxy, $bytes_to_read );

				if ( false === $data ) {

					$bytes_to_read = 0;

				} else {			
			
					if ( $get_size ) {

						$str .= $data;

						if ( preg_match( '/size: (\d+)\n(.*)/', $str, $matches ) ) {

							$resp          = $matches[2];
							$bytes_to_read = $matches[1] - mb_strlen( $resp );
							$get_size      = false;

						}

					} else {

						$bytes_to_read -= mb_strlen( $data );

						$resp .= $data;

					}

				}

				if ( time() > $start + $this->max_read_time ) {

					$bytes_to_read = 0;
					$resp          = false;

				}

			} while ( $bytes_to_read > 0 );

		}

		return $resp;

	}

	/**
	 * Admin UI to let the end user know something about the Redis connection isn't working.
	 */
	public function wp_action_admin_notices_warn_missing_redis() {

		if ( ! current_user_can( 'manage_options' ) || empty( $this->missing_redis_message ) ) {

			return;

		}

		echo '<div class="message error"><p>' . esc_html( $this->missing_redis_message ) . '</p></div>';

	}

	/**
	 * Returns the XID of the account.
	 *
	 * @return string $xid currnet account xid.
	 */
	protected function _get_xid() {

		// Get the xid from the path.
		$path = __DIR__;

		if ( empty( $path ) ) {

			return false;

		}

		$path_portions = explode( '/', $path );
		$length        = count( $path_portions );

		// XID is the parent directory of the root base directory 'html'.
		// Need to remove 2 get the correct position.  array[0] is blank
        	$xid_pos = $length - 3;

        	if ( is_numeric( $path_portions[ $xid_pos ] ) ) {

            	// XID from path on servers other than SFTP.
            	return $path_portions[ $xid_pos ];

        	}

        	// XID from path on SFTP servers.
        	return substr( substr( $path_portions[ $xid_pos ], 4 ), 0, -3 );

	}


	/**
	 * Handler packages cache requests into container to be parsed by the Redis client.
	 *
	 * @param string $action sets container content and format based on class method calling the handler.
	 * @param bool|string $key the group and key for the cache data concatenated together.(default is false)
	 * @param bool|string $data the data to be cached (default is false)
	 * @param int $expire setting for cache expiration (default = default_expire).
	 * @return string $container
	 */
	protected function _create_container( $action, $key = false, $data = false, $expire = 0 ) {

		if ( empty( $action ) ) {

			return false;

		}

		$xid = $this->_get_xid();

        // If $xid is false do not return a container.
        if ( false === $xid ) {

            return false;

        }

		// given the value of $action build and format the array for the corresponding method.
		switch ( $action ) {

			case 'del':

				$container = [ 'action' => 'del', 'xid' => $xid, 'key' => $key ];

				break;

			case 'flush':

				$container = [ 'action' => 'flush', 'xid' => $xid ];

				break;

			case 'get':

				$container = [ 'action' => 'get', 'xid' => $xid, 'key' => $key ];

				break;

			case 'incrby':

				$container = [ 'action' => 'incrby', 'xid' => $xid, 'key' => $key, 'offset' => $data ];

				break;

			case 'exists':

				$container = [ 'action' => 'exists', 'xid' => $xid, 'key' => $key ];

				break;

			case 'set':

				if ( 00 == $expire ) {

					$expire = $this->default_expire;

				} else if ( $expire > $this->max_cache_ttl ) {

					$expire = $this->max_cache_ttl;

				}

				$expire    = ( time() + $expire ) * 1000;
				$container = [ 'action' => 'set', 'xid' => $xid, 'key' => $key, 'data' => (string) $data, 'expire' => (string) $expire ];

				break;

			default:

				return false;

				break;

		}
			// create json container from array.
			$json_container = json_encode( $container );

			// Get length of json encoded string.
			$size = mb_strlen( $json_container . "\n" );

			// Add string length to the json blob.
			$container = 'size: ' . $size . "\n" . $json_container . "\n";

			return $container;

	}

	/**
	 * Handler to remove cached data from JSON container returned from Redis.
	 *
	 * @param string $response response from Redis client to be opened and parsed.
	 * @return mixed return if data exists return true and data as string else return false.
	 * @throws Exception
	 */
	protected function _deconst_container( $response ) {

		if ( empty( $response ) ) {

			return false;

		}

		// Convert JSON to php object.
		try {

			$response_obj = json_decode( $response );
			
			if ( 'false' == strtolower( $response_obj->response ) ) {

				return false;

			}

			return isset( $response_obj->data ) ? $response_obj->data : false;

		} catch ( Exception $e ) {

			throw new Exception( 'JSON Error: ' . json_last_error_msg() );

		}

	}

    /**
     * Will validate that nonoptions contains correct data
     *
     * Called when we get/set nonoptions key
     *
     * @return bool True is valid, false if invalid
     */
    protected function validate_notoptions( $value ) {
        // If this is not an array, then it is not valid
        if ( ! is_array( $value ) ) {

            return false;

        }

        // Check that this contains boolean values (or at least the first element)
        reset( $value );
        $first_key = key( $value );

        if ( ! is_bool( $value[ $first_key ] ) ) {

            return false;
        }

        // Check for values WordPress has to have in order to work
        if ( array_key_exists( 'site_url', $value ) ||  array_key_exists( 'template', $value ) ) {
            return false;
        }

        return true;
    }

	/**
	 * Sets up object properties; PHP 5 style constructor
	 *
	 * @return null|WP_Object_Cache If cache is disabled, returns null.
	 */
	public function __construct() {

		global $blog_id, $table_prefix;

		$this->multisite   = is_multisite();
		$this->blog_prefix = $this->multisite ? $blog_id . ':' : '';

		if ( ! $this->_connect_redis() && function_exists( 'add_action' ) ) {

			add_action( 'admin_notices', [ $this, 'wp_action_admin_notices_warn_missing_redis' ] );

		}

		$this->global_prefix = ( $this->multisite || defined( 'CUSTOM_USER_TABLE' ) && defined( 'CUSTOM_USER_META_TABLE' ) ) ? '' : $table_prefix;

	}

	/**
	 * Will save the object cache before object is completely destroyed.
	 *
	 * Called upon object destruction, which should be when PHP ends.
	 *
	 * @return bool True value. Won't be used by PHP
	 */
	public function __destruct() {

		return true;

	}

}
